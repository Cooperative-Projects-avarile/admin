{"version":3,"file":"static/js/461.cb37aaf6.chunk.js","mappings":"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","sources":["common/components/treeSelectBase/treeSelectBase.tsx","common/hocs/formItemHoc/formItemHoc.tsx","pages/homePage/devPage/storeDevPage/components/modalForm/modalForm.tsx","pages/homePage/devPage/storeDevPage/storeDevPage.module.scss","pages/homePage/devPage/storeDevPage/storeDevPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { TreeSelect, TreeSelectProps } from \"antd\";\nimport { useFlatInject } from \"@/common/hooks\";\nimport { RouteItem } from \"@/config/types\";\nimport FormItemHoc, {\n  type FormItemHocProps,\n} from \"@/common/hocs/formItemHoc/formItemHoc\";\n\nconst transformTreeDataLoop = (data: RouteItem[]) => {\n  return data.map((item) => {\n    if (item.children) {\n      return {\n        value: item.path,\n        title: item.meta.title,\n        children: transformTreeDataLoop(item.children),\n      };\n    } else {\n      return {\n        value: item.path,\n        title: item.meta.title,\n      };\n    }\n  });\n};\nconst TreeSelectBase = ({\n  options={},\n  ...rest\n}: FormItemHocProps & { options?: TreeSelectProps }) => {\n  // 取routerStore中的路由数据\n  const [routerStore] = useFlatInject(\"routerStore\");\n  const { routesData } = routerStore;\n  const [treeData, setTreeData] = useState<any[]>([]);\n  useEffect(() => {\n    let temp = transformTreeDataLoop(routesData);\n    setTreeData(temp);\n  }, [routesData]);\n  return (\n    <FormItemHoc  {...rest}>\n      <TreeSelect\n        showSearch\n        style={{ width: \"100%\" }}\n        dropdownStyle={{ maxHeight: 400, overflow: \"auto\" }}\n        placeholder=\"Please select\"\n        allowClear\n        treeDefaultExpandAll\n        treeData={treeData}\n      />\n    </FormItemHoc>\n  );\n};\n\nexport default TreeSelectBase;\n","import { Form, FormItemProps } from \"antd\";\n\nexport type FormItemHocProps = FormItemProps & {\n  isForm?: boolean;\n  Comp?: React.FC<any>;\n};\n\nconst FromItemHoc = ({\n  Comp,\n  rules,\n  isForm = true,\n  children,\n  ...rest\n}: FormItemHocProps) => {\n  let temp = {...rest};\n  \n  return (\n    <>\n      {isForm ? (\n        <Form.Item\n          rules={\n            rules || [\n              {\n                required: true,\n                message: \"不可为空!\",\n              },\n            ]\n          }\n          {...temp}\n        >\n         {children}\n        </Form.Item>\n      ) : (\n        <Comp />\n      )}\n    </>\n  );\n};\n\nexport default FromItemHoc;\n","import TreeSelectBase from \"@/common/components/treeSelectBase/treeSelectBase\";\nimport { Button, Form, Input, Modal } from \"antd\";\nimport { useState } from \"react\";\n\ninterface Values {\n  title: string;\n  description: string;\n  modifier: string;\n}\n\ninterface CollectionCreateFormProps {\n  open: boolean;\n  onCreate: (values: Values) => void;\n  onCancel: () => void;\n}\n\nconst CollectionCreateForm: React.FC<CollectionCreateFormProps> = ({\n  open,\n  onCreate,\n  onCancel,\n}) => {\n  // 引入natur的articleStore\n  const [form] = Form.useForm();\n  return (\n    <Modal\n      open={open}\n      title=\"新建仓库\"\n      okText=\"确定\"\n      cancelText=\"取消\"\n      onCancel={() => {\n        form.resetFields();\n        onCancel();\n      }}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            form.resetFields();\n            onCreate(values);\n          })\n          .catch((info) => {\n            console.log(\"Validate Failed:\", info);\n          });\n      }}>\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"form_in_modal\"\n        initialValues={{ modifier: \"public\" }}>\n        <Form.Item\n          name=\"name\"\n          label=\"状态仓库名称\"\n          rules={[\n            {\n              required: true,\n              message: \"请输入!\",\n            },\n          ]}>\n          <Input />\n        </Form.Item>\n        {/* // 备注 */}\n        <Form.Item\n          name={\"remark\"}\n          rules={[\n            {\n              required: true,\n              message: \"请输入!\",\n            },\n          ]}\n          label=\"备注\">\n          <Input type=\"textarea\" />\n        </Form.Item>\n        <TreeSelectBase\n          rules={[\n            {\n              required: true,\n              message: \"请输入!\",\n            },\n          ]}\n          name={\"path\"}\n          label={\"路径\"}\n        />\n      </Form>\n    </Modal>\n  );\n};\n\nconst ModalForm = ({\n  btnLabel,\n  handleUpload,\n}: {\n  btnLabel: string;\n  handleUpload: (values: any) => void;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const onCreate = (values: any) => {\n    handleUpload(values);\n    setOpen(false);\n  };\n\n  return (\n    <span\n      style={{\n        marginRight: \"12px\",\n      }}>\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          setOpen(true);\n        }}>\n        + {btnLabel}\n      </Button>\n      <CollectionCreateForm\n        open={open}\n        onCreate={onCreate}\n        onCancel={() => {\n          setOpen(false);\n        }}\n      />\n    </span>\n  );\n};\n\nexport default ModalForm;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useFlatInject, useGreatAsync } from \"@/common/hooks\";\nimport type {\n  StoreType,\n} from \"@/services/stores/devStore/devStore.model\";\nimport { Space, Table } from \"antd\";\nimport type { ColumnsType } from \"antd/es/table\";\nimport { useEffect } from \"react\";\nimport ModalForm from \"./components/modalForm/modalForm\";\nimport styles from \"./storeDevPage.module.scss\";\n\nconst columns: ColumnsType<StoreType> = [\n  {\n    title: \"状态仓库名称\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"操作\",\n    key: \"action\",\n    render: (_, record) => (\n      <Space size=\"middle\">\n        <a>修改</a>\n      </Space>\n    ),\n  },\n];\n\nconst StoreDevPage = () => {\n  const [devStore] = useFlatInject(\"devStore\");\n  const { pageNum, pageSize, total, addStore, storeList, createStoreList } =\n    devStore;\n  const { loading: loading1, run: createStoreListG } = useGreatAsync(\n    createStoreList,\n    {\n      auto: true,\n      debounceTime: 1000,\n    }\n  );\n\n  const handlePageChange = async (pageNum = 1, pageSize) => {\n    await createStoreListG();\n  };\n  const handleUpload = (values: any) => {\n    addStore(values);\n  };\n  useEffect(() => {\n    handlePageChange(pageNum, pageSize);\n  }, []);\n  return (\n    <div className={styles.content}>\n      <div className={styles.operate_board}>\n        <ModalForm btnLabel=\"添加状态仓库\" handleUpload={handleUpload} />\n      </div>\n      <Table\n        rowKey={(record) => {\n          return record.id;\n        }}\n        loading={loading1}\n        pagination={{\n          pageSize,\n          current: pageNum,\n          total,\n          onChange(page, pageSize) {\n            console.log(page, pageSize);\n            handlePageChange(page, pageSize);\n          },\n        }}\n        columns={columns}\n        dataSource={storeList}\n      />\n    </div>\n  );\n};\n\nexport default StoreDevPage;\n"],"names":["transformTreeDataLoop","data","map","item","children","value","path","title","meta","_ref","options","rest","routerStore","useFlatInject","routesData","treeData","setTreeData","useState","useEffect","temp","_jsx","FormItemHoc","TreeSelect","showSearch","style","width","dropdownStyle","maxHeight","overflow","placeholder","allowClear","treeDefaultExpandAll","Comp","rules","isForm","_Fragment","Form","required","message","CollectionCreateForm","open","onCreate","onCancel","form","Modal","okText","cancelText","resetFields","onOk","validateFields","then","values","catch","info","console","log","_jsxs","layout","name","initialValues","modifier","label","Input","type","TreeSelectBase","_ref2","btnLabel","handleUpload","setOpen","marginRight","Button","onClick","columns","dataIndex","key","render","_","record","Space","size","StoreDevPage","devStore","pageNum","pageSize","total","addStore","storeList","createStoreList","loading","loading1","run","createStoreListG","useGreatAsync","auto","debounceTime","handlePageChange","async","className","styles","ModalForm","Table","rowKey","id","pagination","current","onChange","page","dataSource"],"sourceRoot":""}